<?php
/**
 * ProductConfiguratorApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Configurator Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProductConfiguratorApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductConfiguratorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'productConfiguratorBulkCreateOptions' => [
            'application/json',
        ],
        'productConfiguratorBulkCreateProperties' => [
            'application/json',
        ],
        'productConfiguratorBulkCreateSteps' => [
            'application/json',
        ],
        'productConfiguratorBulkDeleteOptions' => [
            'application/json',
        ],
        'productConfiguratorBulkDeleteSteps' => [
            'application/json',
        ],
        'productConfiguratorBulkUpdateOptions' => [
            'application/json',
        ],
        'productConfiguratorBulkUpdateProperties' => [
            'application/json',
        ],
        'productConfiguratorCopyConfigurator' => [
            'application/json',
        ],
        'productConfiguratorCopyOption' => [
            'application/json',
        ],
        'productConfiguratorCopyStep' => [
            'application/json',
        ],
        'productConfiguratorCreateDependency' => [
            'application/json',
        ],
        'productConfiguratorCreateMatrix' => [
            'application/json',
        ],
        'productConfiguratorCreateOption' => [
            'application/json',
        ],
        'productConfiguratorCreateProperty' => [
            'application/json',
        ],
        'productConfiguratorCreateStep' => [
            'application/json',
        ],
        'productConfiguratorDeleteConfigurator' => [
            'application/json',
        ],
        'productConfiguratorDeleteDependency' => [
            'application/json',
        ],
        'productConfiguratorDeleteMatrix' => [
            'application/json',
        ],
        'productConfiguratorDeleteOption' => [
            'application/json',
        ],
        'productConfiguratorDeleteStep' => [
            'application/json',
        ],
        'productConfiguratorGetAvailableConfiguration' => [
            'application/json',
        ],
        'productConfiguratorGetAvailableConfiguration2' => [
            'application/json',
        ],
        'productConfiguratorGetConfigurationFromSelections' => [
            'application/json',
        ],
        'productConfiguratorGetMatrix' => [
            'application/json',
        ],
        'productConfiguratorListDependencies' => [
            'application/json',
        ],
        'productConfiguratorListMatrices' => [
            'application/json',
        ],
        'productConfiguratorListOptions' => [
            'application/json',
        ],
        'productConfiguratorListProperties' => [
            'application/json',
        ],
        'productConfiguratorRemovePricelistFromMatrix' => [
            'application/json',
        ],
        'productConfiguratorUpdateConfigurator' => [
            'application/json',
        ],
        'productConfiguratorUpdateDependency' => [
            'application/json',
        ],
        'productConfiguratorUpdateMatrix' => [
            'application/json',
        ],
        'productConfiguratorUpdateOption' => [
            'application/json',
        ],
        'productConfiguratorUpdateProperty' => [
            'application/json',
        ],
        'productConfiguratorUpdateStep' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productConfiguratorBulkCreateOptions
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkCreateOptions($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateOptions'][0])
    {
        list($response) = $this->productConfiguratorBulkCreateOptionsWithHttpInfo($tenant_id, $step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkCreateOptionsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkCreateOptionsWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateOptions'][0])
    {
        $request = $this->productConfiguratorBulkCreateOptionsRequest($tenant_id, $step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkCreateOptionsAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateOptionsAsync($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateOptions'][0])
    {
        return $this->productConfiguratorBulkCreateOptionsAsyncWithHttpInfo($tenant_id, $step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkCreateOptionsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateOptionsAsyncWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateResponse';
        $request = $this->productConfiguratorBulkCreateOptionsRequest($tenant_id, $step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkCreateOptions'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkCreateOptionsRequest($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateOptions'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkCreateOptions'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorBulkCreateOptions'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkCreateOptions'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}/option/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkCreateProperties
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkCreateProperties($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateProperties'][0])
    {
        list($response) = $this->productConfiguratorBulkCreatePropertiesWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkCreatePropertiesWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkCreatePropertiesWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateProperties'][0])
    {
        $request = $this->productConfiguratorBulkCreatePropertiesRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkCreatePropertiesAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreatePropertiesAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateProperties'][0])
    {
        return $this->productConfiguratorBulkCreatePropertiesAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkCreatePropertiesAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreatePropertiesAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateProperties'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateResponse';
        $request = $this->productConfiguratorBulkCreatePropertiesRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkCreateProperties'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkCreatePropertiesRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateProperties'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkCreateProperties'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkCreateProperties'
            );
        }


        $resourcePath = '/v1/{tenantId}/property/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkCreateSteps
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkCreateSteps($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        list($response) = $this->productConfiguratorBulkCreateStepsWithHttpInfo($tenant_id, $configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkCreateStepsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkCreateStepsWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        $request = $this->productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkCreateStepsAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateStepsAsync($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        return $this->productConfiguratorBulkCreateStepsAsyncWithHttpInfo($tenant_id, $configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkCreateStepsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateStepsAsyncWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateResponse';
        $request = $this->productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkCreateSteps'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkCreateSteps'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorBulkCreateSteps'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkCreateSteps'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkDeleteOptions
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkDeleteRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkDeleteOptions($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteOptions'][0])
    {
        list($response) = $this->productConfiguratorBulkDeleteOptionsWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkDeleteOptionsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkDeleteOptionsWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteOptions'][0])
    {
        $request = $this->productConfiguratorBulkDeleteOptionsRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkDeleteOptionsAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteOptionsAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteOptions'][0])
    {
        return $this->productConfiguratorBulkDeleteOptionsAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkDeleteOptionsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteOptionsAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteOptions'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorBulkDeleteOptionsRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkDeleteOptions'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkDeleteOptionsRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteOptions'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkDeleteOptions'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkDeleteOptions'
            );
        }


        $resourcePath = '/v1/{tenantId}/option/delete/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkDeleteSteps
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkDeleteRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkDeleteSteps($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        list($response) = $this->productConfiguratorBulkDeleteStepsWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkDeleteStepsWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        $request = $this->productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteStepsAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        return $this->productConfiguratorBulkDeleteStepsAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteStepsAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkDeleteSteps'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepBulkDeleteRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkDeleteSteps'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkDeleteSteps'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/delete/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkUpdateOptions
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkUpdateOptions($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateOptions'][0])
    {
        list($response) = $this->productConfiguratorBulkUpdateOptionsWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkUpdateOptionsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkUpdateOptionsWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateOptions'][0])
    {
        $request = $this->productConfiguratorBulkUpdateOptionsRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkUpdateOptionsAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkUpdateOptionsAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateOptions'][0])
    {
        return $this->productConfiguratorBulkUpdateOptionsAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkUpdateOptionsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkUpdateOptionsAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateResponse';
        $request = $this->productConfiguratorBulkUpdateOptionsRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkUpdateOptions'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkUpdateOptionsRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateOptions'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkUpdateOptions'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkUpdateOptions'
            );
        }


        $resourcePath = '/v1/{tenantId}/option/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkUpdateProperties
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkUpdateProperties($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateProperties'][0])
    {
        list($response) = $this->productConfiguratorBulkUpdatePropertiesWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkUpdatePropertiesWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkUpdatePropertiesWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateProperties'][0])
    {
        $request = $this->productConfiguratorBulkUpdatePropertiesRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkUpdatePropertiesAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkUpdatePropertiesAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateProperties'][0])
    {
        return $this->productConfiguratorBulkUpdatePropertiesAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkUpdatePropertiesAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkUpdatePropertiesAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateProperties'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateResponse';
        $request = $this->productConfiguratorBulkUpdatePropertiesRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkUpdateProperties'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyBulkUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkUpdateProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkUpdatePropertiesRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkUpdateProperties'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkUpdateProperties'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkUpdateProperties'
            );
        }


        $resourcePath = '/v1/{tenantId}/properties/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCopyConfigurator
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $source_configurator_id source_configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorCopyRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCopyConfigurator($tenant_id, $source_configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyConfigurator'][0])
    {
        list($response) = $this->productConfiguratorCopyConfiguratorWithHttpInfo($tenant_id, $source_configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCopyConfiguratorWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCopyConfiguratorWithHttpInfo($tenant_id, $source_configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyConfigurator'][0])
    {
        $request = $this->productConfiguratorCopyConfiguratorRequest($tenant_id, $source_configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCopyConfiguratorAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $source_configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyConfiguratorAsync($tenant_id, $source_configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyConfigurator'][0])
    {
        return $this->productConfiguratorCopyConfiguratorAsyncWithHttpInfo($tenant_id, $source_configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCopyConfiguratorAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyConfiguratorAsyncWithHttpInfo($tenant_id, $source_configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyConfigurator'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity';
        $request = $this->productConfiguratorCopyConfiguratorRequest($tenant_id, $source_configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCopyConfigurator'
     *
     * @param  string $tenant_id (required)
     * @param  string $source_configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCopyConfiguratorRequest($tenant_id, $source_configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyConfigurator'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCopyConfigurator'
            );
        }

        // verify the required parameter 'source_configurator_id' is set
        if ($source_configurator_id === null || (is_array($source_configurator_id) && count($source_configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_configurator_id when calling productConfiguratorCopyConfigurator'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCopyConfigurator'
            );
        }


        $resourcePath = '/v1/{tenantId}/product/{sourceConfiguratorId}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($source_configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceConfiguratorId' . '}',
                ObjectSerializer::toPathValue($source_configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCopyOption
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $source_option_id source_option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCopyRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCopyOption($tenant_id, $source_option_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyOption'][0])
    {
        list($response) = $this->productConfiguratorCopyOptionWithHttpInfo($tenant_id, $source_option_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCopyOptionWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCopyOptionWithHttpInfo($tenant_id, $source_option_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyOption'][0])
    {
        $request = $this->productConfiguratorCopyOptionRequest($tenant_id, $source_option_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCopyOptionAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $source_option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyOptionAsync($tenant_id, $source_option_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyOption'][0])
    {
        return $this->productConfiguratorCopyOptionAsyncWithHttpInfo($tenant_id, $source_option_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCopyOptionAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyOptionAsyncWithHttpInfo($tenant_id, $source_option_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyOption'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
        $request = $this->productConfiguratorCopyOptionRequest($tenant_id, $source_option_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCopyOption'
     *
     * @param  string $tenant_id (required)
     * @param  string $source_option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCopyOptionRequest($tenant_id, $source_option_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyOption'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCopyOption'
            );
        }

        // verify the required parameter 'source_option_id' is set
        if ($source_option_id === null || (is_array($source_option_id) && count($source_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_option_id when calling productConfiguratorCopyOption'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCopyOption'
            );
        }


        $resourcePath = '/v1/{tenantId}/option/{sourceOptionId}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($source_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceOptionId' . '}',
                ObjectSerializer::toPathValue($source_option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCopyStep
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $source_step_id source_step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCopyRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCopyStep($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        list($response) = $this->productConfiguratorCopyStepWithHttpInfo($tenant_id, $source_step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCopyStepWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCopyStepWithHttpInfo($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        $request = $this->productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCopyStepAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyStepAsync($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        return $this->productConfiguratorCopyStepAsyncWithHttpInfo($tenant_id, $source_step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCopyStepAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyStepAsyncWithHttpInfo($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCopyStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCopyRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCopyStep'
            );
        }

        // verify the required parameter 'source_step_id' is set
        if ($source_step_id === null || (is_array($source_step_id) && count($source_step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_step_id when calling productConfiguratorCopyStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCopyStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{sourceStepId}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($source_step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceStepId' . '}',
                ObjectSerializer::toPathValue($source_step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateDependency
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratordependencyEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateDependency($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateDependency'][0])
    {
        list($response) = $this->productConfiguratorCreateDependencyWithHttpInfo($tenant_id, $step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreateDependencyWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratordependencyEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreateDependencyWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateDependency'][0])
    {
        $request = $this->productConfiguratorCreateDependencyRequest($tenant_id, $step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratordependencyEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratordependencyEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreateDependencyAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateDependencyAsync($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateDependency'][0])
    {
        return $this->productConfiguratorCreateDependencyAsyncWithHttpInfo($tenant_id, $step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreateDependencyAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateDependencyAsyncWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateDependency'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity';
        $request = $this->productConfiguratorCreateDependencyRequest($tenant_id, $step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateDependency'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreateDependencyRequest($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateDependency'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateDependency'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorCreateDependency'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateDependency'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}/dependency/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateMatrix
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateMatrix($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateMatrix'][0])
    {
        list($response) = $this->productConfiguratorCreateMatrixWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreateMatrixWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreateMatrixWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateMatrix'][0])
    {
        $request = $this->productConfiguratorCreateMatrixRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreateMatrixAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateMatrixAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateMatrix'][0])
    {
        return $this->productConfiguratorCreateMatrixAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreateMatrixAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateMatrixAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateMatrix'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
        $request = $this->productConfiguratorCreateMatrixRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateMatrix'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreateMatrixRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateMatrix'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateMatrix'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateMatrix'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateOption
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateOption($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateOption'][0])
    {
        list($response) = $this->productConfiguratorCreateOptionWithHttpInfo($tenant_id, $step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreateOptionWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreateOptionWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateOption'][0])
    {
        $request = $this->productConfiguratorCreateOptionRequest($tenant_id, $step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreateOptionAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateOptionAsync($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateOption'][0])
    {
        return $this->productConfiguratorCreateOptionAsyncWithHttpInfo($tenant_id, $step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreateOptionAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateOptionAsyncWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateOption'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
        $request = $this->productConfiguratorCreateOptionRequest($tenant_id, $step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateOption'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreateOptionRequest($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateOption'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateOption'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorCreateOption'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateOption'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}/option/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateProperty
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateProperty($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateProperty'][0])
    {
        list($response) = $this->productConfiguratorCreatePropertyWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreatePropertyWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorpropertyEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreatePropertyWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateProperty'][0])
    {
        $request = $this->productConfiguratorCreatePropertyRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreatePropertyAsync
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreatePropertyAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateProperty'][0])
    {
        return $this->productConfiguratorCreatePropertyAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreatePropertyAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreatePropertyAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateProperty'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity';
        $request = $this->productConfiguratorCreatePropertyRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateProperty'
     *
     * @param  string $tenant_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreatePropertyRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateProperty'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateProperty'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateProperty'
            );
        }


        $resourcePath = '/v1/{tenantId}/property/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateStep
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCreateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateStep($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        list($response) = $this->productConfiguratorCreateStepWithHttpInfo($tenant_id, $configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreateStepWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreateStepWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        $request = $this->productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreateStepAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateStepAsync($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        return $this->productConfiguratorCreateStepAsyncWithHttpInfo($tenant_id, $configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreateStepAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateStepAsyncWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepCreateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateStep'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorCreateStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}/step/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteConfigurator
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteConfigurator($tenant_id, $configurator_id, string $contentType = self::contentTypes['productConfiguratorDeleteConfigurator'][0])
    {
        list($response) = $this->productConfiguratorDeleteConfiguratorWithHttpInfo($tenant_id, $configurator_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteConfiguratorWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteConfiguratorWithHttpInfo($tenant_id, $configurator_id, string $contentType = self::contentTypes['productConfiguratorDeleteConfigurator'][0])
    {
        $request = $this->productConfiguratorDeleteConfiguratorRequest($tenant_id, $configurator_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteConfiguratorAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteConfiguratorAsync($tenant_id, $configurator_id, string $contentType = self::contentTypes['productConfiguratorDeleteConfigurator'][0])
    {
        return $this->productConfiguratorDeleteConfiguratorAsyncWithHttpInfo($tenant_id, $configurator_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteConfiguratorAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteConfiguratorAsyncWithHttpInfo($tenant_id, $configurator_id, string $contentType = self::contentTypes['productConfiguratorDeleteConfigurator'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorDeleteConfiguratorRequest($tenant_id, $configurator_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteConfigurator'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteConfiguratorRequest($tenant_id, $configurator_id, string $contentType = self::contentTypes['productConfiguratorDeleteConfigurator'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteConfigurator'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorDeleteConfigurator'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteDependency
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $dependency_id dependency_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteDependency($tenant_id, $dependency_id, string $contentType = self::contentTypes['productConfiguratorDeleteDependency'][0])
    {
        list($response) = $this->productConfiguratorDeleteDependencyWithHttpInfo($tenant_id, $dependency_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteDependencyWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteDependencyWithHttpInfo($tenant_id, $dependency_id, string $contentType = self::contentTypes['productConfiguratorDeleteDependency'][0])
    {
        $request = $this->productConfiguratorDeleteDependencyRequest($tenant_id, $dependency_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteDependencyAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteDependencyAsync($tenant_id, $dependency_id, string $contentType = self::contentTypes['productConfiguratorDeleteDependency'][0])
    {
        return $this->productConfiguratorDeleteDependencyAsyncWithHttpInfo($tenant_id, $dependency_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteDependencyAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteDependencyAsyncWithHttpInfo($tenant_id, $dependency_id, string $contentType = self::contentTypes['productConfiguratorDeleteDependency'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorDeleteDependencyRequest($tenant_id, $dependency_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteDependency'
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteDependencyRequest($tenant_id, $dependency_id, string $contentType = self::contentTypes['productConfiguratorDeleteDependency'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteDependency'
            );
        }

        // verify the required parameter 'dependency_id' is set
        if ($dependency_id === null || (is_array($dependency_id) && count($dependency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependency_id when calling productConfiguratorDeleteDependency'
            );
        }


        $resourcePath = '/v1/{tenantId}/dependency/{dependencyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($dependency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dependencyId' . '}',
                ObjectSerializer::toPathValue($dependency_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteMatrix
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $matrix_id matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteMatrix($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorDeleteMatrix'][0])
    {
        list($response) = $this->productConfiguratorDeleteMatrixWithHttpInfo($tenant_id, $matrix_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteMatrixWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteMatrixWithHttpInfo($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorDeleteMatrix'][0])
    {
        $request = $this->productConfiguratorDeleteMatrixRequest($tenant_id, $matrix_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteMatrixAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteMatrixAsync($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorDeleteMatrix'][0])
    {
        return $this->productConfiguratorDeleteMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteMatrixAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorDeleteMatrix'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorDeleteMatrixRequest($tenant_id, $matrix_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteMatrix'
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteMatrixRequest($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorDeleteMatrix'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteMatrix'
            );
        }

        // verify the required parameter 'matrix_id' is set
        if ($matrix_id === null || (is_array($matrix_id) && count($matrix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $matrix_id when calling productConfiguratorDeleteMatrix'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/{matrixId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($matrix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'matrixId' . '}',
                ObjectSerializer::toPathValue($matrix_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteOption
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $option_id option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteOption($tenant_id, $option_id, string $contentType = self::contentTypes['productConfiguratorDeleteOption'][0])
    {
        list($response) = $this->productConfiguratorDeleteOptionWithHttpInfo($tenant_id, $option_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteOptionWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteOptionWithHttpInfo($tenant_id, $option_id, string $contentType = self::contentTypes['productConfiguratorDeleteOption'][0])
    {
        $request = $this->productConfiguratorDeleteOptionRequest($tenant_id, $option_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteOptionAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteOptionAsync($tenant_id, $option_id, string $contentType = self::contentTypes['productConfiguratorDeleteOption'][0])
    {
        return $this->productConfiguratorDeleteOptionAsyncWithHttpInfo($tenant_id, $option_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteOptionAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteOptionAsyncWithHttpInfo($tenant_id, $option_id, string $contentType = self::contentTypes['productConfiguratorDeleteOption'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorDeleteOptionRequest($tenant_id, $option_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteOption'
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteOptionRequest($tenant_id, $option_id, string $contentType = self::contentTypes['productConfiguratorDeleteOption'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteOption'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_id when calling productConfiguratorDeleteOption'
            );
        }


        $resourcePath = '/v1/{tenantId}/option/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteStep
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteStep($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        list($response) = $this->productConfiguratorDeleteStepWithHttpInfo($tenant_id, $step_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteStepWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteStepWithHttpInfo($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        $request = $this->productConfiguratorDeleteStepRequest($tenant_id, $step_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteStepAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteStepAsync($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        return $this->productConfiguratorDeleteStepAsyncWithHttpInfo($tenant_id, $step_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteStepAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteStepAsyncWithHttpInfo($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorDeleteStepRequest($tenant_id, $step_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteStepRequest($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteStep'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorDeleteStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorGetAvailableConfiguration
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $product_id product_id (required)
     * @param  string $configurator_id configurator_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorGetAvailableConfiguration($tenant_id, $product_id, $configurator_id = null, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration'][0])
    {
        list($response) = $this->productConfiguratorGetAvailableConfigurationWithHttpInfo($tenant_id, $product_id, $configurator_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorGetAvailableConfigurationWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  string $configurator_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorGetAvailableConfigurationWithHttpInfo($tenant_id, $product_id, $configurator_id = null, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration'][0])
    {
        $request = $this->productConfiguratorGetAvailableConfigurationRequest($tenant_id, $product_id, $configurator_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorGetAvailableConfigurationAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  string $configurator_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetAvailableConfigurationAsync($tenant_id, $product_id, $configurator_id = null, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration'][0])
    {
        return $this->productConfiguratorGetAvailableConfigurationAsyncWithHttpInfo($tenant_id, $product_id, $configurator_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorGetAvailableConfigurationAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  string $configurator_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetAvailableConfigurationAsyncWithHttpInfo($tenant_id, $product_id, $configurator_id = null, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse';
        $request = $this->productConfiguratorGetAvailableConfigurationRequest($tenant_id, $product_id, $configurator_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorGetAvailableConfiguration'
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  string $configurator_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorGetAvailableConfigurationRequest($tenant_id, $product_id, $configurator_id = null, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorGetAvailableConfiguration'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productConfiguratorGetAvailableConfiguration'
            );
        }



        $resourcePath = '/v1/{tenantId}/product/{productId}/configuration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $configurator_id,
            'configuratorId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorGetAvailableConfiguration2
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $product_id product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorGetAvailableConfiguration2($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration2'][0])
    {
        list($response) = $this->productConfiguratorGetAvailableConfiguration2WithHttpInfo($tenant_id, $product_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorGetAvailableConfiguration2WithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration2'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorGetAvailableConfiguration2WithHttpInfo($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration2'][0])
    {
        $request = $this->productConfiguratorGetAvailableConfiguration2Request($tenant_id, $product_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorGetAvailableConfiguration2Async
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetAvailableConfiguration2Async($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration2'][0])
    {
        return $this->productConfiguratorGetAvailableConfiguration2AsyncWithHttpInfo($tenant_id, $product_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorGetAvailableConfiguration2AsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetAvailableConfiguration2AsyncWithHttpInfo($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration2'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationResponse';
        $request = $this->productConfiguratorGetAvailableConfiguration2Request($tenant_id, $product_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorGetAvailableConfiguration2'
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetAvailableConfigurationRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetAvailableConfiguration2'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorGetAvailableConfiguration2Request($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetAvailableConfiguration2'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorGetAvailableConfiguration2'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productConfiguratorGetAvailableConfiguration2'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorGetAvailableConfiguration2'
            );
        }


        $resourcePath = '/v1/{tenantId}/product/{productId}/configuration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorGetConfigurationFromSelections
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $product_id product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetConfigurationFromSelections'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorGetConfigurationFromSelections($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetConfigurationFromSelections'][0])
    {
        list($response) = $this->productConfiguratorGetConfigurationFromSelectionsWithHttpInfo($tenant_id, $product_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorGetConfigurationFromSelectionsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetConfigurationFromSelections'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorGetConfigurationFromSelectionsWithHttpInfo($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetConfigurationFromSelections'][0])
    {
        $request = $this->productConfiguratorGetConfigurationFromSelectionsRequest($tenant_id, $product_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorGetConfigurationFromSelectionsAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetConfigurationFromSelections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetConfigurationFromSelectionsAsync($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetConfigurationFromSelections'][0])
    {
        return $this->productConfiguratorGetConfigurationFromSelectionsAsyncWithHttpInfo($tenant_id, $product_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorGetConfigurationFromSelectionsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetConfigurationFromSelections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetConfigurationFromSelectionsAsyncWithHttpInfo($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetConfigurationFromSelections'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsResponse';
        $request = $this->productConfiguratorGetConfigurationFromSelectionsRequest($tenant_id, $product_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorGetConfigurationFromSelections'
     *
     * @param  string $tenant_id (required)
     * @param  string $product_id (required)
     * @param  \OpenAPI\Client\Model\ConfigurationGetConfigurationFromSelectionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetConfigurationFromSelections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorGetConfigurationFromSelectionsRequest($tenant_id, $product_id, $body, string $contentType = self::contentTypes['productConfiguratorGetConfigurationFromSelections'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorGetConfigurationFromSelections'
            );
        }

        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productConfiguratorGetConfigurationFromSelections'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorGetConfigurationFromSelections'
            );
        }


        $resourcePath = '/v1/{tenantId}/product/{productId}/configuration-from-selections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorGetMatrix
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $matrix_id matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorGetMatrix($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorGetMatrix'][0])
    {
        list($response) = $this->productConfiguratorGetMatrixWithHttpInfo($tenant_id, $matrix_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorGetMatrixWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorGetMatrixWithHttpInfo($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorGetMatrix'][0])
    {
        $request = $this->productConfiguratorGetMatrixRequest($tenant_id, $matrix_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorGetMatrixAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetMatrixAsync($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorGetMatrix'][0])
    {
        return $this->productConfiguratorGetMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorGetMatrixAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorGetMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorGetMatrix'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
        $request = $this->productConfiguratorGetMatrixRequest($tenant_id, $matrix_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorGetMatrix'
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorGetMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorGetMatrixRequest($tenant_id, $matrix_id, string $contentType = self::contentTypes['productConfiguratorGetMatrix'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorGetMatrix'
            );
        }

        // verify the required parameter 'matrix_id' is set
        if ($matrix_id === null || (is_array($matrix_id) && count($matrix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $matrix_id when calling productConfiguratorGetMatrix'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/{matrixId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($matrix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'matrixId' . '}',
                ObjectSerializer::toPathValue($matrix_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorListDependencies
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  int $page_size page_size (required)
     * @param  \OpenAPI\Client\Model\DependencyListDependenciesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListDependencies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DependencyListDependenciesResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorListDependencies($tenant_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListDependencies'][0])
    {
        list($response) = $this->productConfiguratorListDependenciesWithHttpInfo($tenant_id, $page_size, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorListDependenciesWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\DependencyListDependenciesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListDependencies'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DependencyListDependenciesResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorListDependenciesWithHttpInfo($tenant_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListDependencies'][0])
    {
        $request = $this->productConfiguratorListDependenciesRequest($tenant_id, $page_size, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DependencyListDependenciesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DependencyListDependenciesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DependencyListDependenciesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DependencyListDependenciesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DependencyListDependenciesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorListDependenciesAsync
     *
     * @param  string $tenant_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\DependencyListDependenciesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListDependencies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListDependenciesAsync($tenant_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListDependencies'][0])
    {
        return $this->productConfiguratorListDependenciesAsyncWithHttpInfo($tenant_id, $page_size, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorListDependenciesAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\DependencyListDependenciesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListDependencies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListDependenciesAsyncWithHttpInfo($tenant_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListDependencies'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DependencyListDependenciesResponse';
        $request = $this->productConfiguratorListDependenciesRequest($tenant_id, $page_size, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorListDependencies'
     *
     * @param  string $tenant_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\DependencyListDependenciesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListDependencies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorListDependenciesRequest($tenant_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListDependencies'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorListDependencies'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling productConfiguratorListDependencies'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorListDependencies'
            );
        }


        $resourcePath = '/v1/{tenantId}/page-size/{pageSize}/dependencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorListMatrices
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  string $page_size page_size (required)
     * @param  \OpenAPI\Client\Model\MatrixListMatricesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListMatrices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MatrixListMatricesResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorListMatrices($tenant_id, $configurator_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListMatrices'][0])
    {
        list($response) = $this->productConfiguratorListMatricesWithHttpInfo($tenant_id, $configurator_id, $page_size, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorListMatricesWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\MatrixListMatricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListMatrices'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MatrixListMatricesResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorListMatricesWithHttpInfo($tenant_id, $configurator_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListMatrices'][0])
    {
        $request = $this->productConfiguratorListMatricesRequest($tenant_id, $configurator_id, $page_size, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MatrixListMatricesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MatrixListMatricesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MatrixListMatricesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MatrixListMatricesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MatrixListMatricesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorListMatricesAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\MatrixListMatricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListMatrices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListMatricesAsync($tenant_id, $configurator_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListMatrices'][0])
    {
        return $this->productConfiguratorListMatricesAsyncWithHttpInfo($tenant_id, $configurator_id, $page_size, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorListMatricesAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\MatrixListMatricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListMatrices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListMatricesAsyncWithHttpInfo($tenant_id, $configurator_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListMatrices'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MatrixListMatricesResponse';
        $request = $this->productConfiguratorListMatricesRequest($tenant_id, $configurator_id, $page_size, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorListMatrices'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\MatrixListMatricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListMatrices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorListMatricesRequest($tenant_id, $configurator_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListMatrices'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorListMatrices'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorListMatrices'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling productConfiguratorListMatrices'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorListMatrices'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/matrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorListOptions
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  int $page_size page_size (required)
     * @param  \OpenAPI\Client\Model\OptionListOptionsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OptionListOptionsResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorListOptions($tenant_id, $step_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListOptions'][0])
    {
        list($response) = $this->productConfiguratorListOptionsWithHttpInfo($tenant_id, $step_id, $page_size, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorListOptionsWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\OptionListOptionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListOptions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OptionListOptionsResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorListOptionsWithHttpInfo($tenant_id, $step_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListOptions'][0])
    {
        $request = $this->productConfiguratorListOptionsRequest($tenant_id, $step_id, $page_size, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OptionListOptionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OptionListOptionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OptionListOptionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OptionListOptionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OptionListOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorListOptionsAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\OptionListOptionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListOptionsAsync($tenant_id, $step_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListOptions'][0])
    {
        return $this->productConfiguratorListOptionsAsyncWithHttpInfo($tenant_id, $step_id, $page_size, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorListOptionsAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\OptionListOptionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListOptionsAsyncWithHttpInfo($tenant_id, $step_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListOptions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OptionListOptionsResponse';
        $request = $this->productConfiguratorListOptionsRequest($tenant_id, $step_id, $page_size, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorListOptions'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  int $page_size (required)
     * @param  \OpenAPI\Client\Model\OptionListOptionsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorListOptionsRequest($tenant_id, $step_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListOptions'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorListOptions'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorListOptions'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling productConfiguratorListOptions'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorListOptions'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorListProperties
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $matrix_id matrix_id (required)
     * @param  string $page_size page_size (required)
     * @param  \OpenAPI\Client\Model\PropertyListPropertiesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PropertyListPropertiesResponse|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorListProperties($tenant_id, $matrix_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListProperties'][0])
    {
        list($response) = $this->productConfiguratorListPropertiesWithHttpInfo($tenant_id, $matrix_id, $page_size, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorListPropertiesWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\PropertyListPropertiesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListProperties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PropertyListPropertiesResponse|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorListPropertiesWithHttpInfo($tenant_id, $matrix_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListProperties'][0])
    {
        $request = $this->productConfiguratorListPropertiesRequest($tenant_id, $matrix_id, $page_size, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PropertyListPropertiesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PropertyListPropertiesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PropertyListPropertiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PropertyListPropertiesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PropertyListPropertiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorListPropertiesAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\PropertyListPropertiesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListPropertiesAsync($tenant_id, $matrix_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListProperties'][0])
    {
        return $this->productConfiguratorListPropertiesAsyncWithHttpInfo($tenant_id, $matrix_id, $page_size, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorListPropertiesAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\PropertyListPropertiesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorListPropertiesAsyncWithHttpInfo($tenant_id, $matrix_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListProperties'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PropertyListPropertiesResponse';
        $request = $this->productConfiguratorListPropertiesRequest($tenant_id, $matrix_id, $page_size, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorListProperties'
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $page_size (required)
     * @param  \OpenAPI\Client\Model\PropertyListPropertiesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorListProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorListPropertiesRequest($tenant_id, $matrix_id, $page_size, $body, string $contentType = self::contentTypes['productConfiguratorListProperties'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorListProperties'
            );
        }

        // verify the required parameter 'matrix_id' is set
        if ($matrix_id === null || (is_array($matrix_id) && count($matrix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $matrix_id when calling productConfiguratorListProperties'
            );
        }

        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling productConfiguratorListProperties'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorListProperties'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($matrix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'matrixId' . '}',
                ObjectSerializer::toPathValue($matrix_id),
                $resourcePath
            );
        }
        // path params
        if ($page_size !== null) {
            $resourcePath = str_replace(
                '{' . 'pageSize' . '}',
                ObjectSerializer::toPathValue($page_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorRemovePricelistFromMatrix
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $matrix_id matrix_id (required)
     * @param  string $pricelist_grn pricelist_grn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorRemovePricelistFromMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorRemovePricelistFromMatrix($tenant_id, $matrix_id, $pricelist_grn, string $contentType = self::contentTypes['productConfiguratorRemovePricelistFromMatrix'][0])
    {
        list($response) = $this->productConfiguratorRemovePricelistFromMatrixWithHttpInfo($tenant_id, $matrix_id, $pricelist_grn, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorRemovePricelistFromMatrixWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $pricelist_grn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorRemovePricelistFromMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorRemovePricelistFromMatrixWithHttpInfo($tenant_id, $matrix_id, $pricelist_grn, string $contentType = self::contentTypes['productConfiguratorRemovePricelistFromMatrix'][0])
    {
        $request = $this->productConfiguratorRemovePricelistFromMatrixRequest($tenant_id, $matrix_id, $pricelist_grn, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorRemovePricelistFromMatrixAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $pricelist_grn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorRemovePricelistFromMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorRemovePricelistFromMatrixAsync($tenant_id, $matrix_id, $pricelist_grn, string $contentType = self::contentTypes['productConfiguratorRemovePricelistFromMatrix'][0])
    {
        return $this->productConfiguratorRemovePricelistFromMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $pricelist_grn, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorRemovePricelistFromMatrixAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $pricelist_grn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorRemovePricelistFromMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorRemovePricelistFromMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $pricelist_grn, string $contentType = self::contentTypes['productConfiguratorRemovePricelistFromMatrix'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
        $request = $this->productConfiguratorRemovePricelistFromMatrixRequest($tenant_id, $matrix_id, $pricelist_grn, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorRemovePricelistFromMatrix'
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  string $pricelist_grn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorRemovePricelistFromMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorRemovePricelistFromMatrixRequest($tenant_id, $matrix_id, $pricelist_grn, string $contentType = self::contentTypes['productConfiguratorRemovePricelistFromMatrix'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorRemovePricelistFromMatrix'
            );
        }

        // verify the required parameter 'matrix_id' is set
        if ($matrix_id === null || (is_array($matrix_id) && count($matrix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $matrix_id when calling productConfiguratorRemovePricelistFromMatrix'
            );
        }

        // verify the required parameter 'pricelist_grn' is set
        if ($pricelist_grn === null || (is_array($pricelist_grn) && count($pricelist_grn) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricelist_grn when calling productConfiguratorRemovePricelistFromMatrix'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/{matrixId}/pricelist/{pricelistGrn}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($matrix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'matrixId' . '}',
                ObjectSerializer::toPathValue($matrix_id),
                $resourcePath
            );
        }
        // path params
        if ($pricelist_grn !== null) {
            $resourcePath = str_replace(
                '{' . 'pricelistGrn' . '}',
                ObjectSerializer::toPathValue($pricelist_grn),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateConfigurator
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateConfigurator($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateConfigurator'][0])
    {
        list($response) = $this->productConfiguratorUpdateConfiguratorWithHttpInfo($tenant_id, $configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateConfiguratorWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateConfigurator'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateConfiguratorWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateConfigurator'][0])
    {
        $request = $this->productConfiguratorUpdateConfiguratorRequest($tenant_id, $configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateConfiguratorAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateConfiguratorAsync($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateConfigurator'][0])
    {
        return $this->productConfiguratorUpdateConfiguratorAsyncWithHttpInfo($tenant_id, $configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateConfiguratorAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateConfiguratorAsyncWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateConfigurator'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorconfiguratorEntity';
        $request = $this->productConfiguratorUpdateConfiguratorRequest($tenant_id, $configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateConfigurator'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorconfiguratorUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateConfigurator'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateConfiguratorRequest($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateConfigurator'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateConfigurator'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorUpdateConfigurator'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateConfigurator'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateDependency
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $dependency_id dependency_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratordependencyEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateDependency($tenant_id, $dependency_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateDependency'][0])
    {
        list($response) = $this->productConfiguratorUpdateDependencyWithHttpInfo($tenant_id, $dependency_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateDependencyWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateDependency'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratordependencyEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateDependencyWithHttpInfo($tenant_id, $dependency_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateDependency'][0])
    {
        $request = $this->productConfiguratorUpdateDependencyRequest($tenant_id, $dependency_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratordependencyEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratordependencyEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateDependencyAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateDependencyAsync($tenant_id, $dependency_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateDependency'][0])
    {
        return $this->productConfiguratorUpdateDependencyAsyncWithHttpInfo($tenant_id, $dependency_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateDependencyAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateDependencyAsyncWithHttpInfo($tenant_id, $dependency_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateDependency'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratordependencyEntity';
        $request = $this->productConfiguratorUpdateDependencyRequest($tenant_id, $dependency_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateDependency'
     *
     * @param  string $tenant_id (required)
     * @param  string $dependency_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratordependencyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateDependency'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateDependencyRequest($tenant_id, $dependency_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateDependency'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateDependency'
            );
        }

        // verify the required parameter 'dependency_id' is set
        if ($dependency_id === null || (is_array($dependency_id) && count($dependency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dependency_id when calling productConfiguratorUpdateDependency'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateDependency'
            );
        }


        $resourcePath = '/v1/{tenantId}/dependency/{dependencyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($dependency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dependencyId' . '}',
                ObjectSerializer::toPathValue($dependency_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateMatrix
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $matrix_id matrix_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateMatrix($tenant_id, $matrix_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateMatrix'][0])
    {
        list($response) = $this->productConfiguratorUpdateMatrixWithHttpInfo($tenant_id, $matrix_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateMatrixWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateMatrix'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratormatrixEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateMatrixWithHttpInfo($tenant_id, $matrix_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateMatrix'][0])
    {
        $request = $this->productConfiguratorUpdateMatrixRequest($tenant_id, $matrix_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratormatrixEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateMatrixAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateMatrixAsync($tenant_id, $matrix_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateMatrix'][0])
    {
        return $this->productConfiguratorUpdateMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateMatrixAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateMatrixAsyncWithHttpInfo($tenant_id, $matrix_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateMatrix'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratormatrixEntity';
        $request = $this->productConfiguratorUpdateMatrixRequest($tenant_id, $matrix_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateMatrix'
     *
     * @param  string $tenant_id (required)
     * @param  string $matrix_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratormatrixUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateMatrix'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateMatrixRequest($tenant_id, $matrix_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateMatrix'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateMatrix'
            );
        }

        // verify the required parameter 'matrix_id' is set
        if ($matrix_id === null || (is_array($matrix_id) && count($matrix_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $matrix_id when calling productConfiguratorUpdateMatrix'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateMatrix'
            );
        }


        $resourcePath = '/v1/{tenantId}/matrix/{matrixId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($matrix_id !== null) {
            $resourcePath = str_replace(
                '{' . 'matrixId' . '}',
                ObjectSerializer::toPathValue($matrix_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateOption
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $option_id option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateOption($tenant_id, $option_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateOption'][0])
    {
        list($response) = $this->productConfiguratorUpdateOptionWithHttpInfo($tenant_id, $option_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateOptionWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateOption'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratoroptionEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateOptionWithHttpInfo($tenant_id, $option_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateOption'][0])
    {
        $request = $this->productConfiguratorUpdateOptionRequest($tenant_id, $option_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratoroptionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateOptionAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateOptionAsync($tenant_id, $option_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateOption'][0])
    {
        return $this->productConfiguratorUpdateOptionAsyncWithHttpInfo($tenant_id, $option_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateOptionAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateOptionAsyncWithHttpInfo($tenant_id, $option_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateOption'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratoroptionEntity';
        $request = $this->productConfiguratorUpdateOptionRequest($tenant_id, $option_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateOption'
     *
     * @param  string $tenant_id (required)
     * @param  string $option_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratoroptionUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateOption'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateOptionRequest($tenant_id, $option_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateOption'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateOption'
            );
        }

        // verify the required parameter 'option_id' is set
        if ($option_id === null || (is_array($option_id) && count($option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $option_id when calling productConfiguratorUpdateOption'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateOption'
            );
        }


        $resourcePath = '/v1/{tenantId}/option/{optionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'optionId' . '}',
                ObjectSerializer::toPathValue($option_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateProperty
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $property_id property_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateProperty($tenant_id, $property_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateProperty'][0])
    {
        list($response) = $this->productConfiguratorUpdatePropertyWithHttpInfo($tenant_id, $property_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdatePropertyWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $property_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateProperty'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorpropertyEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdatePropertyWithHttpInfo($tenant_id, $property_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateProperty'][0])
    {
        $request = $this->productConfiguratorUpdatePropertyRequest($tenant_id, $property_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdatePropertyAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $property_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdatePropertyAsync($tenant_id, $property_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateProperty'][0])
    {
        return $this->productConfiguratorUpdatePropertyAsyncWithHttpInfo($tenant_id, $property_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdatePropertyAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $property_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdatePropertyAsyncWithHttpInfo($tenant_id, $property_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateProperty'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorpropertyEntity';
        $request = $this->productConfiguratorUpdatePropertyRequest($tenant_id, $property_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateProperty'
     *
     * @param  string $tenant_id (required)
     * @param  string $property_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorpropertyUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateProperty'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdatePropertyRequest($tenant_id, $property_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateProperty'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateProperty'
            );
        }

        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling productConfiguratorUpdateProperty'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateProperty'
            );
        }


        $resourcePath = '/v1/{tenantId}/property/{propertyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'propertyId' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateStep
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepUpdateRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateStep($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        list($response) = $this->productConfiguratorUpdateStepWithHttpInfo($tenant_id, $step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateStepWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductconfiguratorstepEntity|\OpenAPI\Client\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateStepWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        $request = $this->productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProductconfiguratorstepEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GooglerpcStatus' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateStepAsync
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateStepAsync($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        return $this->productConfiguratorUpdateStepAsyncWithHttpInfo($tenant_id, $step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateStepAsyncWithHttpInfo
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateStepAsyncWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \OpenAPI\Client\Model\ProductconfiguratorstepUpdateRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateStep'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorUpdateStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
