<?php
/**
 * StepApi
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\ProductConfigurator
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Configurator Service
 *
 * ## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\ProductConfigurator\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GeminiCommerce\ProductConfigurator\ApiException;
use GeminiCommerce\ProductConfigurator\Configuration;
use GeminiCommerce\ProductConfigurator\HeaderSelector;
use GeminiCommerce\ProductConfigurator\ObjectSerializer;

/**
 * StepApi Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\ProductConfigurator
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StepApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'productConfiguratorBulkCreateSteps' => [
            'application/json',
        ],
        'productConfiguratorBulkDeleteSteps' => [
            'application/json',
        ],
        'productConfiguratorCopyStep' => [
            'application/json',
        ],
        'productConfiguratorCreateStep' => [
            'application/json',
        ],
        'productConfiguratorDeleteStep' => [
            'application/json',
        ],
        'productConfiguratorUpdateStep' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productConfiguratorBulkCreateSteps
     *
     * Bulk Create Steps
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkCreateStepsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkCreateSteps($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        list($response) = $this->productConfiguratorBulkCreateStepsWithHttpInfo($tenant_id, $configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkCreateStepsWithHttpInfo
     *
     * Bulk Create Steps
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkCreateStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkCreateStepsWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        $request = $this->productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkCreateStepsAsync
     *
     * Bulk Create Steps
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkCreateStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateStepsAsync($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        return $this->productConfiguratorBulkCreateStepsAsyncWithHttpInfo($tenant_id, $configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkCreateStepsAsyncWithHttpInfo
     *
     * Bulk Create Steps
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkCreateStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkCreateStepsAsyncWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {
        $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepBulkCreateResponse';
        $request = $this->productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkCreateSteps'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkCreateStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkCreateSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkCreateStepsRequest($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkCreateSteps'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkCreateSteps'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorBulkCreateSteps'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkCreateSteps'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorBulkDeleteSteps
     *
     * Bulk Delete Steps
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkDeleteStepsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorBulkDeleteSteps($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        list($response) = $this->productConfiguratorBulkDeleteStepsWithHttpInfo($tenant_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsWithHttpInfo
     *
     * Bulk Delete Steps
     *
     * @param  string $tenant_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkDeleteStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorBulkDeleteStepsWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        $request = $this->productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsAsync
     *
     * Bulk Delete Steps
     *
     * @param  string $tenant_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkDeleteStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteStepsAsync($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        return $this->productConfiguratorBulkDeleteStepsAsyncWithHttpInfo($tenant_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorBulkDeleteStepsAsyncWithHttpInfo
     *
     * Bulk Delete Steps
     *
     * @param  string $tenant_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkDeleteStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorBulkDeleteStepsAsyncWithHttpInfo($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {
        $returnType = 'object';
        $request = $this->productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorBulkDeleteSteps'
     *
     * @param  string $tenant_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorBulkDeleteStepsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorBulkDeleteSteps'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorBulkDeleteStepsRequest($tenant_id, $body, string $contentType = self::contentTypes['productConfiguratorBulkDeleteSteps'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorBulkDeleteSteps'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorBulkDeleteSteps'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/delete/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCopyStep
     *
     * Copy Step
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $source_step_id source_step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCopyStepRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorCopyStep($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        list($response) = $this->productConfiguratorCopyStepWithHttpInfo($tenant_id, $source_step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCopyStepWithHttpInfo
     *
     * Copy Step
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCopyStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCopyStepWithHttpInfo($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        $request = $this->productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCopyStepAsync
     *
     * Copy Step
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCopyStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyStepAsync($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        return $this->productConfiguratorCopyStepAsyncWithHttpInfo($tenant_id, $source_step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCopyStepAsyncWithHttpInfo
     *
     * Copy Step
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCopyStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCopyStepAsyncWithHttpInfo($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {
        $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCopyStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $source_step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCopyStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCopyStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCopyStepRequest($tenant_id, $source_step_id, $body, string $contentType = self::contentTypes['productConfiguratorCopyStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCopyStep'
            );
        }

        // verify the required parameter 'source_step_id' is set
        if ($source_step_id === null || (is_array($source_step_id) && count($source_step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source_step_id when calling productConfiguratorCopyStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCopyStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{sourceStepId}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($source_step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sourceStepId' . '}',
                ObjectSerializer::toPathValue($source_step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorCreateStep
     *
     * Create Step
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $configurator_id configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCreateStepRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorCreateStep($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        list($response) = $this->productConfiguratorCreateStepWithHttpInfo($tenant_id, $configurator_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorCreateStepWithHttpInfo
     *
     * Create Step
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCreateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorCreateStepWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        $request = $this->productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorCreateStepAsync
     *
     * Create Step
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCreateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateStepAsync($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        return $this->productConfiguratorCreateStepAsyncWithHttpInfo($tenant_id, $configurator_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorCreateStepAsyncWithHttpInfo
     *
     * Create Step
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCreateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorCreateStepAsyncWithHttpInfo($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {
        $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorCreateStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $configurator_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorCreateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorCreateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorCreateStepRequest($tenant_id, $configurator_id, $body, string $contentType = self::contentTypes['productConfiguratorCreateStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorCreateStep'
            );
        }

        // verify the required parameter 'configurator_id' is set
        if ($configurator_id === null || (is_array($configurator_id) && count($configurator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configurator_id when calling productConfiguratorCreateStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorCreateStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/configurator/{configuratorId}/step/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($configurator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'configuratorId' . '}',
                ObjectSerializer::toPathValue($configurator_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorDeleteStep
     *
     * Delete Step
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorDeleteStep($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        list($response) = $this->productConfiguratorDeleteStepWithHttpInfo($tenant_id, $step_id, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorDeleteStepWithHttpInfo
     *
     * Delete Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorDeleteStepWithHttpInfo($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        $request = $this->productConfiguratorDeleteStepRequest($tenant_id, $step_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorDeleteStepAsync
     *
     * Delete Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteStepAsync($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        return $this->productConfiguratorDeleteStepAsyncWithHttpInfo($tenant_id, $step_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorDeleteStepAsyncWithHttpInfo
     *
     * Delete Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorDeleteStepAsyncWithHttpInfo($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {
        $returnType = '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus';
        $request = $this->productConfiguratorDeleteStepRequest($tenant_id, $step_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorDeleteStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorDeleteStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorDeleteStepRequest($tenant_id, $step_id, string $contentType = self::contentTypes['productConfiguratorDeleteStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorDeleteStep'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorDeleteStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productConfiguratorUpdateStep
     *
     * Update Step
     *
     * @param  string $tenant_id tenant_id (required)
     * @param  string $step_id step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorUpdateStepRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus
     */
    public function productConfiguratorUpdateStep($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        list($response) = $this->productConfiguratorUpdateStepWithHttpInfo($tenant_id, $step_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation productConfiguratorUpdateStepWithHttpInfo
     *
     * Update Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorUpdateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\ProductConfigurator\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus|\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function productConfiguratorUpdateStepWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        $request = $this->productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\ProductConfigurator\Model\GooglerpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productConfiguratorUpdateStepAsync
     *
     * Update Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorUpdateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateStepAsync($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        return $this->productConfiguratorUpdateStepAsyncWithHttpInfo($tenant_id, $step_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productConfiguratorUpdateStepAsyncWithHttpInfo
     *
     * Update Step
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorUpdateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productConfiguratorUpdateStepAsyncWithHttpInfo($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {
        $returnType = '\GeminiCommerce\ProductConfigurator\Model\ProductconfiguratorstepEntity';
        $request = $this->productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productConfiguratorUpdateStep'
     *
     * @param  string $tenant_id (required)
     * @param  string $step_id (required)
     * @param  \GeminiCommerce\ProductConfigurator\Model\ProductConfiguratorUpdateStepRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['productConfiguratorUpdateStep'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productConfiguratorUpdateStepRequest($tenant_id, $step_id, $body, string $contentType = self::contentTypes['productConfiguratorUpdateStep'][0])
    {

        // verify the required parameter 'tenant_id' is set
        if ($tenant_id === null || (is_array($tenant_id) && count($tenant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tenant_id when calling productConfiguratorUpdateStep'
            );
        }

        // verify the required parameter 'step_id' is set
        if ($step_id === null || (is_array($step_id) && count($step_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $step_id when calling productConfiguratorUpdateStep'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling productConfiguratorUpdateStep'
            );
        }


        $resourcePath = '/v1/{tenantId}/step/{stepId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tenant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tenantId' . '}',
                ObjectSerializer::toPathValue($tenant_id),
                $resourcePath
            );
        }
        // path params
        if ($step_id !== null) {
            $resourcePath = str_replace(
                '{' . 'stepId' . '}',
                ObjectSerializer::toPathValue($step_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
