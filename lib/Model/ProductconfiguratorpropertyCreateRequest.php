<?php
/**
 * ProductconfiguratorpropertyCreateRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product Configurator Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductconfiguratorpropertyCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductconfiguratorpropertyCreateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'productconfiguratorpropertyCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tenant_id' => 'string',
        'matrix_id' => 'string',
        'step_id_to_option_id' => 'array<string,string>',
        'generic_property' => '\OpenAPI\Client\Model\ProductconfiguratorpropertyGenericProperty',
        'price_property' => '\OpenAPI\Client\Model\ProductconfiguratorpropertyPriceProperty',
        'weight_property' => '\OpenAPI\Client\Model\ProductconfiguratorpropertyWeightProperty'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tenant_id' => null,
        'matrix_id' => null,
        'step_id_to_option_id' => null,
        'generic_property' => null,
        'price_property' => null,
        'weight_property' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tenant_id' => false,
		'matrix_id' => false,
		'step_id_to_option_id' => false,
		'generic_property' => false,
		'price_property' => false,
		'weight_property' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenantId',
        'matrix_id' => 'matrixId',
        'step_id_to_option_id' => 'stepIdToOptionId',
        'generic_property' => 'genericProperty',
        'price_property' => 'priceProperty',
        'weight_property' => 'weightProperty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'matrix_id' => 'setMatrixId',
        'step_id_to_option_id' => 'setStepIdToOptionId',
        'generic_property' => 'setGenericProperty',
        'price_property' => 'setPriceProperty',
        'weight_property' => 'setWeightProperty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'matrix_id' => 'getMatrixId',
        'step_id_to_option_id' => 'getStepIdToOptionId',
        'generic_property' => 'getGenericProperty',
        'price_property' => 'getPriceProperty',
        'weight_property' => 'getWeightProperty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('matrix_id', $data ?? [], null);
        $this->setIfExists('step_id_to_option_id', $data ?? [], null);
        $this->setIfExists('generic_property', $data ?? [], null);
        $this->setIfExists('price_property', $data ?? [], null);
        $this->setIfExists('weight_property', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets matrix_id
     *
     * @return string|null
     */
    public function getMatrixId()
    {
        return $this->container['matrix_id'];
    }

    /**
     * Sets matrix_id
     *
     * @param string|null $matrix_id matrix_id
     *
     * @return self
     */
    public function setMatrixId($matrix_id)
    {
        if (is_null($matrix_id)) {
            throw new \InvalidArgumentException('non-nullable matrix_id cannot be null');
        }
        $this->container['matrix_id'] = $matrix_id;

        return $this;
    }

    /**
     * Gets step_id_to_option_id
     *
     * @return array<string,string>|null
     */
    public function getStepIdToOptionId()
    {
        return $this->container['step_id_to_option_id'];
    }

    /**
     * Sets step_id_to_option_id
     *
     * @param array<string,string>|null $step_id_to_option_id step_id_to_option_id
     *
     * @return self
     */
    public function setStepIdToOptionId($step_id_to_option_id)
    {
        if (is_null($step_id_to_option_id)) {
            throw new \InvalidArgumentException('non-nullable step_id_to_option_id cannot be null');
        }
        $this->container['step_id_to_option_id'] = $step_id_to_option_id;

        return $this;
    }

    /**
     * Gets generic_property
     *
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyGenericProperty|null
     */
    public function getGenericProperty()
    {
        return $this->container['generic_property'];
    }

    /**
     * Sets generic_property
     *
     * @param \OpenAPI\Client\Model\ProductconfiguratorpropertyGenericProperty|null $generic_property generic_property
     *
     * @return self
     */
    public function setGenericProperty($generic_property)
    {
        if (is_null($generic_property)) {
            throw new \InvalidArgumentException('non-nullable generic_property cannot be null');
        }
        $this->container['generic_property'] = $generic_property;

        return $this;
    }

    /**
     * Gets price_property
     *
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyPriceProperty|null
     */
    public function getPriceProperty()
    {
        return $this->container['price_property'];
    }

    /**
     * Sets price_property
     *
     * @param \OpenAPI\Client\Model\ProductconfiguratorpropertyPriceProperty|null $price_property price_property
     *
     * @return self
     */
    public function setPriceProperty($price_property)
    {
        if (is_null($price_property)) {
            throw new \InvalidArgumentException('non-nullable price_property cannot be null');
        }
        $this->container['price_property'] = $price_property;

        return $this;
    }

    /**
     * Gets weight_property
     *
     * @return \OpenAPI\Client\Model\ProductconfiguratorpropertyWeightProperty|null
     */
    public function getWeightProperty()
    {
        return $this->container['weight_property'];
    }

    /**
     * Sets weight_property
     *
     * @param \OpenAPI\Client\Model\ProductconfiguratorpropertyWeightProperty|null $weight_property weight_property
     *
     * @return self
     */
    public function setWeightProperty($weight_property)
    {
        if (is_null($weight_property)) {
            throw new \InvalidArgumentException('non-nullable weight_property cannot be null');
        }
        $this->container['weight_property'] = $weight_property;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


